# Remarks
#  platf=imx:    First source environment variables that prepare cross compiler environment
#  platf=native: Native compile on Linux, only tested on Raspbian with conn=i2c
#
# Invocation:
#  make -f Makefile_A71CH default app=A71CH conn=i2c platf=imx      ## iMX Cross-compile i2c
#  make -f Makefile_A71CH default app=A71CH conn=i2c platf=native   ## Native compile on Linux using i2c
#  make -f Makefile_A71CH default app=A71CH conn=socket platf=native   ## Native compile on Linux using socket
#  make -f Makefile_A71CH default app=A71CH_HLSE conn=i2c platf=imx   ## iMX Cross-compile i2c
#  make -f Makefile_A71CH default app=A71CH_LIGHT conn=i2c platf=imx ## Light weight application target
#  make -f Makefile_A71CH default app=A71CH_LIGHT conn=i2c platf=native ## Light weight application target
#  make -f Makefile_A71CH default app=A71CH_LIGHT conn=socket platf=native ## Light weight application target
#  make -f Makefile_A71CH default app=A71CH_CONFIG conn=i2c platf=imx ## Configure tool target
#  make -f Makefile_A71CH default app=A71CH_CONFIG conn=i2c platf=native ## Configure tool target
#  make -f Makefile_A71CH default app=A71CH_CONFIG conn=socket platf=native ## Configure tool target
#  make -f Makefile_A71CH default app=RJCT_A71 conn=i2c platf=imx    ## Remote JCShell Server application)
#  make -f Makefile_A71CH default app=RJCT_A71 conn=i2c platf=native ## Remote JCShell Server application)
#
#  make -f Makefile_A71CH lib app=A71CH_LIB conn=i2c platf=imx            ## iMX Cross-compile creating *.so, next example app using lib
#  make -f Makefile_A71CH dl app=A71CH_DL_EXE conn=i2c platf=imx
#  make -f Makefile_A71CH dl app=A71CH_CONFIG_DL_EXE conn=i2c platf=imx
#
ifeq ($(platf),imx)
else
	CROSS_COMPILE =
	ifndef  ccpath
		CC = gcc
	else
		CC = ${ccpath}
	endif
endif
SHELL   = /bin/sh

DFLAGS  = -DLINUX -DFTR_FILE_SYSTEM -DSCP_MODE=C_MAC_C_ENC_R_MAC_R_ENC -Wall -Wno-format -Wno-missing-braces
INC		= \
	-I../hostLib/libCommon/scp \
	-I../hostLib/libCommon/infra \
	-I../hostLib/libCommon/hostCrypto \
	-I../hostLib/libCommon/smCom

SOURCES = ../hostLib/libCommon/scp/scp.c \
	../hostLib/libCommon/infra/sm_apdu.c \
	../hostLib/libCommon/infra/sm_errors.c \
	../hostLib/libCommon/infra/global_platf.c \
	../hostLib/libCommon/hostCrypto/hcAsn.c \
	../hostLib/api/src/ax_crypto_rng.c \
	../hostLib/api/src/ax_util.c

SHARED_LIB_HEADERS = ../hostLib/api/inc/ax_common.h \
	../hostLib/libCommon/hostCrypto/axHostCrypto.h \
	../hostLib/libCommon/hostCrypto/HostCryptoAPI.h \
	../hostLib/libCommon/infra/global_platf.h \
	../hostLib/libCommon/hostCrypto/hcAsn.h \
	../hostLib/libCommon/infra/sm_apdu.h \
	../hostLib/libCommon/infra/sm_types.h \
	../hostLib/libCommon/infra/sm_errors.h \
	../hostLib/libCommon/scp/scp.h \
	../hostLib/libCommon/smCom/smCom.h \
	../hostLib/libCommon/smCom/apduComm.h

A71CH_SOURCES = \
	../hostLib/a71ch/src/a71ch_com.c \
	../hostLib/a71ch/src/a71ch_crypto_derive.c \
	../hostLib/a71ch/src/a71ch_crypto_ecc.c \
	../hostLib/a71ch/src/a71ch_module.c \
	../hostLib/a71ch/src/a71ch_sst.c \
	../hostLib/libCommon/infra/a71_debug.c

A71CH_HLSE_SOURCES = \
	../hostLib/api/src/A71HLSEWrapper.c

A71CH_SCP_SOURCES = \
	../hostLib/api/src/ax_scp.c \
	../hostLib/libCommon/hostCrypto/axHostCryptoOpenSSL.c \
	../hostLib/libCommon/hostCrypto/HostCryptoAPIOpenSSL.c

A71CH_LIGHT_EX_SOURCES = \
	../hostLib/a71ch/light/ex_light.c \
	../hostLib/tstUtil/tst_a71ch_util.c \
	../hostLib/tstUtil/tst_sm_util.c \
	../hostLib/tstUtil/tst_sm_time.c \
	../hostLib/tstUtil/app_boot.c \
	../hostLib/platform/rsp/uECC.c
A71CH_EX_HLSE_SOURCES = \
	../hostLib/a71ch/ex_hlse/ex_hlse_aes.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_boot.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_cert.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_config.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_debug.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_ecc_nohc.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_gpstorage.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_misc.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_psk.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_scp.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_sst.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_sst_kp.c \
	../hostLib/a71ch/ex_hlse/ex_hlse_walkthrough.c \
	../hostLib/tstUtil/tst_sm_util.c \
	../hostLib/tstUtil/tst_a71ch_util.c \
	../hostLib/tstUtil/tst_hlse_a71ch_util.c \
	../hostLib/tstUtil/tst_sm_time.c \
	../hostLib/tstUtil/tstHostCrypto.c \
	../hostLib/tstUtil/hkdf.c \
	../hostLib/tstUtil/app_boot.c

A71CH_EX_SOURCES = \
	../hostLib/a71ch/ex/ex_aes.c \
	../hostLib/a71ch/ex/ex_boot.c \
	../hostLib/a71ch/ex/ex_config.c \
	../hostLib/a71ch/ex/ex_debug.c \
	../hostLib/a71ch/ex/ex_ecc_nohc.c \
	../hostLib/a71ch/ex/ex_gpstorage.c \
	../hostLib/a71ch/ex/ex_misc.c \
	../hostLib/a71ch/ex/ex_psk.c \
	../hostLib/a71ch/ex/ex_scp.c \
	../hostLib/a71ch/ex/ex_sst.c \
	../hostLib/a71ch/ex/ex_sst_kp.c \
	../hostLib/a71ch/ex/ex_walkthrough.c \
	../hostLib/tstUtil/tst_sm_util.c \
	../hostLib/tstUtil/tst_a71ch_util.c \
	../hostLib/tstUtil/tst_sm_time.c \
	../hostLib/tstUtil/tstHostCrypto.c \
	../hostLib/tstUtil/hkdf.c \
	../hostLib/tstUtil/app_boot.c

A71CH_CONFIG_SOURCES = \
	../hostLib/a71ch/app/configCli.c \
	../hostLib/a71ch/app/configCliApdu.c \
	../hostLib/a71ch/app/configCliConnect.c \
	../hostLib/a71ch/app/configCliDebug.c \
	../hostLib/a71ch/app/configCliEcrt.c \
	../hostLib/a71ch/app/configCliErase.c \
	../hostLib/a71ch/app/configCliGen.c \
	../hostLib/a71ch/app/configCliInfo.c \
	../hostLib/a71ch/app/configCliInteractive_ln.c \
	../hostLib/a71ch/app/configCliLock.c \
	../hostLib/a71ch/app/configCliRcrt.c \
	../hostLib/a71ch/app/configCliRefpem.c \
	../hostLib/a71ch/app/configCliScp.c \
	../hostLib/a71ch/app/configCliObj.c \
	../hostLib/a71ch/app/configCliGet.c \
	../hostLib/a71ch/app/configCliScript.c \
	../hostLib/a71ch/app/configCliSet.c \
	../hostLib/a71ch/app/configCliTransport.c \
	../hostLib/a71ch/app/configCliWcrt.c \
	../hostLib/a71ch/app/configCmdApdu.c \
	../hostLib/a71ch/app/configCmdConnect.c \
	../hostLib/a71ch/app/configCmdDebug.c \
	../hostLib/a71ch/app/configCmdErase.c \
	../hostLib/a71ch/app/configCmdGen.c \
	../hostLib/a71ch/app/configCmdInfo.c \
	../hostLib/a71ch/app/configCmdLock.c \
	../hostLib/a71ch/app/configCmdObj.c \
	../hostLib/a71ch/app/configCmdGet.c \
	../hostLib/a71ch/app/configCmdEcrt.c \
	../hostLib/a71ch/app/configCmdWcrt.c \
	../hostLib/a71ch/app/configCmdRcrt.c \
	../hostLib/a71ch/app/configCmdRefpem.c \
	../hostLib/a71ch/app/configCmdScp.c \
	../hostLib/a71ch/app/configCmdSet.c \
	../hostLib/a71ch/app/configCmdTransport.c \
	../hostLib/a71ch/app/configState.c \
	../hostLib/a71ch/app/mainA71chConfig.c \
	../hostLib/tstUtil/tst_sm_util.c \
	../hostLib/tstUtil/tst_a71ch_util.c \
	../hostLib/tstUtil/axCliUtil.c \
	../hostLib/tstUtil/axEccRefPem.c \
	../hostLib/tstUtil/linenoise.c \
	../hostLib/tstUtil/tst_sm_time.c \
	../hostLib/tstUtil/tstHostCrypto.c \
	../hostLib/tstUtil/hkdf.c \
	../hostLib/tstUtil/app_boot.c \
        ../hostLib/platform/rsp/command.c
A71CH_ENGINE_SOURCES = \
	../hostLib/embSeEngine/src/ax_a71chEngine.c \
    ../hostLib/embSeEngine/src/ax_cryptoIpc.c

RJCT_SOURCES = \
	../hostLib/rjct/src/rjct_com.c \
	../hostLib/rjct/src/rjct.c \
	../hostLib/rjct/src/mainRjct.c \

SCI2C_SOURCES = \
	../hostLib/libCommon/smCom/sci2c.c \
	../hostLib/libCommon/smCom/smComSCI2C.c

SCSPI_SOURCES = \
	../hostLib/libCommon/smCom/scspi.c \
	../hostLib/libCommon/smCom/smComSCSPI.c

HEADERS = $(shell echo ./*/*/*.h)
OBJECTS = $(SOURCES:.cpp=.o)

# Conditional statements depending on input parameters
# What application to compile?

ifeq ($(app),RJCT_A71)
	DFLAGS += -DTGT_A71CH
	TARGET  = rjct_a71
	INC		+= \
		 -I../hostLib/tstUtil \
		 -I../hostLib/rjct/inc
	SOURCES = $(RJCT_SOURCES)
endif

ifeq ($(app),A71CH_LIGHT)
	DFLAGS += -DTGT_A71CH -DNO_SECURE_CHANNEL_SUPPORT
	TARGET  = A71CHlight
	INC	+= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/a71ch/ex \
		-I../hostLib/tstUtil \
		-I../hostLib/api/inc \
		-I../hostlib/platform/rsp

	SOURCES += $(A71CH_SOURCES) ../hostLib/libCommon/hostCrypto/axHostCryptoStubs.c ../hostLib/a71ch/light/mainA71CHLight.c $(A71CH_LIGHT_EX_SOURCES)
endif

ifeq ($(app),A71CH_HLSE)
	DFLAGS += -DTGT_A71CH -DHOST_CRYPTO -DOPENSSL
	TARGET  = a71chHlse
	INC	+= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/a71ch/ex \
		-I../hostLib/a71ch/ex_hlse \
		-I../hostLib/tstUtil \
		-I../hostLib/api/inc
	SOURCES += $(A71CH_SOURCES) $(A71CH_HLSE_SOURCES) $(A71CH_SCP_SOURCES) ../hostLib/a71ch/ex_hlse/mainA71CH_hlse.c $(A71CH_EX_HLSE_SOURCES)
endif

ifeq ($(app),A71CH)
	DFLAGS += -DTGT_A71CH -DHOST_CRYPTO -DOPENSSL
	TARGET  = A71CH
	INC	+= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/a71ch/ex \
		-I../hostLib/tstUtil \
		-I../hostLib/api/inc
	SOURCES += $(A71CH_SOURCES) $(A71CH_SCP_SOURCES) ../hostLib/a71ch/ex/mainA71CH.c $(A71CH_EX_SOURCES)
endif

ifeq ($(app),A71CH_DL_EXE)
	DFLAGS += -DTGT_A71CH -DHOST_CRYPTO -DOPENSSL
	TARGET_LIB = A71CH
	LIBS += -l$(TARGET_LIB)_$(conn)_$(platf)
	TARGET  = A71CH
	# Notice INC is set here (and not appended to)
	INC	= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/a71ch/ex \
		-I../hostLib/tstUtil \
		-I../hostLib/api/inc \
		-I$(TARGET_LIB)/inc
	EXE_SOURCES = ../hostLib/a71ch/ex/mainA71CH.c $(A71CH_EX_SOURCES)
endif

ifeq ($(app),A71CH_ENGINE)
	DFLAGS += -DTGT_A71CH -DOPENSSL -std=gnu99 -fpic
    FLAGS += -Wall -DLINUX -O2 -W -D_REENTRANT -DUSE_OPENSSL -fPIC \
		-DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -DDSO_DLFCN -DHAVE_DLFCN_H \
		-DTERMIO -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64  -pipe \
		-DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM  -DAES_ASM \
		-DGHASH_ASM -DOPENSSL_DYNAMIC_ENGINE
	ENGINE_NAME = e2a71ch
	INC		+= \
		 -I../hostLib/a71ch/inc \
		 -I../hostLib/embSeEngine/inc \
		 -I../hostLib/api/inc
	SOURCES += $(A71CH_SOURCES) $(A71CH_SCP_SOURCES) $(A71CH_ENGINE_SOURCES)
endif

ifeq ($(app),A71CH_DL_ENGINE)
	DFLAGS += -DTGT_A71CH -DOPENSSL -std=gnu99 -fpic
    FLAGS += -Wall -DLINUX -O2 -W -D_REENTRANT -DUSE_OPENSSL -fPIC \
		-DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -DDSO_DLFCN -DHAVE_DLFCN_H \
		-DTERMIO -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64  -pipe \
		-DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM  -DAES_ASM \
		-DGHASH_ASM -DOPENSSL_DYNAMIC_ENGINE
	ENGINE_NAME = e2a71ch
	TARGET_LIB = A71CH
	LIBS += -l$(TARGET_LIB)_$(conn)_$(platf)
	# No append, direct assign
	INC		= \
		 -I../hostLib/a71ch/inc \
		 -I../hostLib/embSeEngine/inc \
		 -I../hostLib/api/inc \
		 -I$(TARGET_LIB)/inc
	# No append, direct assign
	ENGINE_SOURCES = $(A71CH_ENGINE_SOURCES)
endif

ifeq ($(app),A71CH_LINKED_ENGINE)
	DFLAGS += -DTGT_A71CH -DOPENSSL -std=gnu99 -fpic
    FLAGS += -Wall -DLINUX -O2 -W -D_REENTRANT -DUSE_OPENSSL -fPIC \
		-DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -DDSO_DLFCN -DHAVE_DLFCN_H \
		-DTERMIO -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64  -pipe \
		-DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM  -DAES_ASM \
		-DGHASH_ASM -DOPENSSL_DYNAMIC_ENGINE
	ENGINE_NAME = e2a71ch
	TARGET_LIB = A71CH
	LIBS += -l$(TARGET_LIB)_$(conn)
	# No append, direct assign
	INC		= \
		 -I../hostLib/embSeEngine/inc
	# No append, direct assign
	ENGINE_SOURCES = $(A71CH_ENGINE_SOURCES)
endif

ifeq ($(app),A71CH_LIB)
	DFLAGS += -DTGT_A71CH -DHOST_CRYPTO -DOPENSSL -fPIC
	TARGET  = A71CH
	INC	+= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/api/inc
	SOURCES += $(A71CH_SOURCES) $(A71CH_SCP_SOURCES)
	SHARED_LIB_HEADERS += ../hostLib/api/inc/ax_scp.h \
		../hostLib/libCommon/infra/a71_debug.h
endif

ifeq ($(app),A71CH_CONFIG)
	DFLAGS += -DTGT_A71CH -DHOST_CRYPTO -DOPENSSL -DAX_CONSOLE_LOG
	TARGET  = a71chConfig
	INC	+= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/a71ch/app \
		-I../hostLib/tstUtil \
		-I../hostLib/api/inc
	SOURCES += $(A71CH_SOURCES) $(A71CH_SCP_SOURCES) $(A71CH_HLSE_SOURCES) $(A71CH_CONFIG_SOURCES)
endif

ifeq ($(app),A71CH_CONFIG_DL_EXE)
	DFLAGS += -DTGT_A71CH -DHOST_CRYPTO -DOPENSSL -DAX_CONSOLE_LOG
	TARGET_LIB = A71CH
	LIBS += -l$(TARGET_LIB)_$(conn)_$(platf)
	TARGET  = a71chConfig
	# Notice INC is set here (and not appended to)
	INC	= \
		-I../hostLib/a71ch/inc \
		-I../hostLib/a71ch/app \
		-I../hostLib/tstUtil \
		-I../hostLib/api/inc \
		-I$(TARGET_LIB)/inc
	EXE_SOURCES = $(A71CH_CONFIG_SOURCES) $(A71CH_HLSE_SOURCES)
endif

# Communication Layer
ifeq ($(conn),socket)
	# running over socket
	DFLAGS += -DRJCT_SOCKET
	SOURCES += \
		../hostLib/libCommon/smCom/smComSocket_linux.c
	SHARED_LIB_HEADERS += ../hostLib/libCommon/smCom/smComSocket.h
	ENGINE_SUFFIX=$(conn)
endif

ifeq ($(conn),i2c)
	# running over I2C
	DFLAGS += -DI2C
	ifeq ($(platf),ea3250)
		SOURCES += $(SCI2C_SOURCES) ../hostLib/platform/ea3250/i2c_a7.c
	else
		ifeq ($(platf),imx)
			SOURCES += $(SCI2C_SOURCES) ../hostLib/platform/imx/i2c_a7.c
		else
			# Only valid for RspPi
			SOURCES += $(SCI2C_SOURCES) ../hostLib/platform/rsp/i2c_a7.c ../hostLib/platform/rsp/pigpio.c ../hostLib/platform/rsp/command.c
		endif
	endif
	SHARED_LIB_HEADERS += ../hostLib/libCommon/smCom/sci2c.h
	ENGINE_SUFFIX=$(conn)
endif

# Special handling of error injection on communication channel
# Currently only applicable to ERDF applet
ifeq ($(app),ERDF_EI)
	SOURCES += ../hostLib/erdf/tst/smCom_ei.c
else
	SOURCES += ../hostLib/libCommon/smCom/smCom.c
endif

# Leave out OpenSSL crypto libraries for apps that don't need them
ifeq ($(app),A71CH_LIGHT)
    LIBS += -ldl
else ifeq ($(app),RJCT_A70)
    LIBS += -ldl
else ifeq ($(app),RJCT_A71)
    LIBS += -ldl
else
    LIBS += -lcrypto -lssl -ldl
endif

# Common files
SOURCES += \
	../hostLib/platform/generic/sm_printf.c \
	../hostLib/platform/generic/sm_timer.c

# Common include paths
INC += \
	-I../hostLib/platform/inc

# Cross compile for ea3250
# Cross compile for imx
# Native compile on Linux Machine or Cygwin
#
ifeq ($(platf),ea3250)
	# EA3250 build
	CROSS_COMPILE= arm-linux-
	FLAGS += -fno-stack-protector -g -ggdb
	DFLAGS += -DPLATFORM_EA3250
else ifeq ($(platf),imx)
	CROSS_COMPILE=
	FLAGS += -fno-stack-protector -g -ggdb
	DFLAGS += -DPLATFORM_IMX
else
	# Native build
	CROSS_COMPILE=
	FLAGS += -fstack-protector-all -g -ggdb
	# OpenSSL include and library path is specific to Ubuntu LTS 14.04 PC.
	INC += \
		-I/usr/local/ssl/include
	LIBINC	+= -L/usr/local/ssl/lib
	#
	ifeq ($(conn),socket)
		# Native build using socket
	else ifeq ($(conn),tda8029_uart)
		# PC build using TDA8029_uart
	else ifeq ($(conn),iicbird)
		# Native build using I2C bird
		# usb-1.0 = Linking to latest usblib; Currently using deprecated version
		# LIBS += -lusb-1.0 -lcrypto -lssl -ldl
		LIBS += -lusb
	else ifeq ($(conn),spi)
		# Native build using SPI
	else ifeq ($(conn),i2c)
		# Native build using I2C and PIGPI (RspPi only)
		INC += -I../hostLib/platform/rsp
		LIBS += -pthread -lrt
	else
		# Native build using pcsc
		INC += -I/usr/include/PCSC
		LIBS += -lpcsclite
	endif
endif

DFLAGS += -DDEBUG

# Prevent executables linked to Host Lib (by convention include _DL_EXE in name) include sources twice
# The construct below achieves the same in a more general way using $(findstring find,in)
ifeq (DL_EXE,$(findstring DL_EXE,$(app)))
	SOURCES = $(EXE_SOURCES)
	LIBINC += -L./$(TARGET_LIB)/lib
endif

# Prevent engines linked to Host Lib (by convention include _DL_ENGINE in name) include sources twice
# The construct below achieves the same in a more general way using $(findstring find,in)
ifeq (DL_ENGINE,$(findstring DL_ENGINE,$(app)))
	SOURCES = $(ENGINE_SOURCES)
	LIBINC += -L./$(TARGET_LIB)/lib
endif

# Link against pre-installed shared libraries
# Prevent engines linked to Host Lib (/usr/local/lib) (by convention include _LINKED_ENGINE in name) include sources twice
# The construct below achieves the same in a more general way using $(findstring find,in)
ifeq (LINKED_ENGINE,$(findstring LINKED_ENGINE,$(app)))
	SOURCES = $(ENGINE_SOURCES)
endif

engine:
	echo Building Engine for $(conn) on $(platf)
	$(CROSS_COMPILE)$(CC) $(FLAGS) $(INC) $(DFLAGS) $(CXXFLAGS) $(LIBINC) -shared -Wl,-soname,lib$(ENGINE_NAME)$(ENGINE_SUFFIX).so -o lib$(ENGINE_NAME)$(ENGINE_SUFFIX).so.1.0.0 $(OBJECTS) $(LIBS)
	cp lib$(ENGINE_NAME)$(ENGINE_SUFFIX).so.1.0.0 lib$(ENGINE_NAME)$(ENGINE_SUFFIX).so
	# ldconfig /usr/local/lib

default:
	echo Building $(app) for $(conn) on $(platf)
	$(CROSS_COMPILE)$(CC) $(FLAGS) $(INC) $(DFLAGS) $(LIBINC) -o $(TARGET)_$(conn)_$(platf) $(OBJECTS) $(LIBS)

lib:
	echo Building shared library $(app) for $(conn) on $(platf)
	mkdir -p $(TARGET)/lib
	mkdir -p $(TARGET)/inc
	$(CROSS_COMPILE)$(CC) $(FLAGS) $(INC) $(DFLAGS) $(CXXFLAGS) $(LIBINC) -shared -Wl,-soname,lib$(TARGET)_$(conn)_$(platf).so.1 -o $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so.1.3.0 $(OBJECTS) $(LIBS)
	cp $(SHARED_LIB_HEADERS) $(TARGET)/inc
	# Because we can't create links on cross-compilation platform, we simply copy
	cp $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so.1.3.0 $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so
	cp $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so.1.3.0 $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so.1
	# Please remove the following line (In case you can create a symbolic link from a standard location)
	cp $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so.1.3.0 lib$(TARGET)_$(conn)_$(platf).so.1.3.0
	cp $(TARGET)/lib/lib$(TARGET)_$(conn)_$(platf).so.1.3.0 lib$(TARGET)_$(conn)_$(platf).so

dl:
	echo Building $(app) using shared library lib$(TARGET_LIB)_$(conn)_$(platf).so
	$(CROSS_COMPILE)$(CC) $(FLAGS) $(INC) $(DFLAGS) $(LIBINC) -o $(TARGET)_$(conn)_$(platf)_dl $(OBJECTS) $(LIBS)

clean:
	rm -rf *.o ERDFsm_tda8029_uart_ea3250 A70CUsm_i2c_ea3250 A70CUTest_i2c_ea3250 A70CUSession_i2c_ea3250
